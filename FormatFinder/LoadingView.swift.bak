import SwiftUI

// MARK: - Loading View
struct LoadingView: View {
    @State private var logoScale: CGFloat = 0.3
    @State private var logoOpacity: Double = 0
    @State private var logoRotation: Double = 0
    @State private var textOpacity: Double = 0
    @State private var progressValue: Double = 0
    @State private var loadingStage = 0
    @State private var pulseAnimation = false
    @State private var particlesVisible = false
    
    let loadingStages = [
        "Preparing golf course...",
        "Loading formats...",
        "Setting up scorecards...",
        "Almost ready..."
    ]
    
    var onLoadingComplete: () -> Void
    
    var body: some View {
        ZStack {
            // Gradient Background
            AnimatedGradientBackground()
            
            // Particles
            if particlesVisible {
                ParticleEmitterView()
            }
            
            VStack(spacing: 60) {
                Spacer()
                
                // Logo Section
                ZStack {
                    // Pulsing circles
                    ForEach(0..<3) { index in
                        Circle()
                            .stroke(
                                LinearGradient(
                                    colors: [
                                        HeadspaceColors.purple.opacity(0.3),
                                        HeadspaceColors.mint.opacity(0.2)
                                    ],
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                ),
                                lineWidth: 2
                            )
                            .frame(
                                width: 120 + CGFloat(index * 40),
                                height: 120 + CGFloat(index * 40)
                            )
                            .scaleEffect(pulseAnimation ? 1.1 : 1.0)
                            .opacity(pulseAnimation ? 0.3 : 0.6)
                            .animation(
                                .easeInOut(duration: 1.5)
                                .repeatForever(autoreverses: true)
                                .delay(Double(index) * 0.2),
                                value: pulseAnimation
                            )
                    }
                    
                    // Main Logo
                    ZStack {
                        // Outer ring
                        Circle()
                            .fill(
                                RadialGradient(
                                    colors: [
                                        HeadspaceColors.purple.opacity(0.2),
                                        HeadspaceColors.purple.opacity(0.05)
                                    ],
                                    center: .center,
                                    startRadius: 50,
                                    endRadius: 100
                                )
                            )
                            .frame(width: 160, height: 160)
                            .blur(radius: 10)
                        
                        // Inner circle
                        Circle()
                            .fill(
                                LinearGradient(
                                    colors: [
                                        HeadspaceColors.purple,
                                        HeadspaceColors.purple.opacity(0.8)
                                    ],
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                            .frame(width: 100, height: 100)
                            .shadow(color: HeadspaceColors.purple.opacity(0.4), radius: 20, x: 0, y: 10)
                        
                        // Golf flag icon
                        Image(systemName: "flag.fill")
                            .font(.system(size: 40))
                            .foregroundColor(.white)
                            .rotationEffect(.degrees(logoRotation))
                    }
                    .scaleEffect(logoScale)
                    .opacity(logoOpacity)
                }
                
                // App Name
                VStack(spacing: 8) {
                    Text("Format Finder")
                        .font(.system(size: 42, weight: .bold, design: .rounded))
                        .foregroundStyle(
                            LinearGradient(
                                colors: [HeadspaceColors.dark, HeadspaceColors.dark.opacity(0.8)],
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .opacity(textOpacity)
                    
                    Text("Discover Your Perfect Game")
                        .font(.system(size: 16, weight: .medium, design: .rounded))
                        .foregroundColor(HeadspaceColors.mediumGray)
                        .opacity(textOpacity * 0.8)
                }
                
                Spacer()
                
                // Loading Section
                VStack(spacing: 24) {
                    // Progress Bar
                    ZStack(alignment: .leading) {
                        // Background
                        RoundedRectangle(cornerRadius: 20)
                            .fill(HeadspaceColors.lightGray.opacity(0.3))
                            .frame(height: 8)
                        
                        // Progress
                        RoundedRectangle(cornerRadius: 20)
                            .fill(
                                LinearGradient(
                                    colors: [
                                        HeadspaceColors.mint,
                                        HeadspaceColors.purple
                                    ],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .frame(width: progressValue * 280, height: 8)
                            .animation(.spring(response: 0.5, dampingFraction: 0.8), value: progressValue)
                    }
                    .frame(width: 280)
                    
                    // Loading Stage Text
                    if loadingStage < loadingStages.count {
                        HStack(spacing: 8) {
                            LoadingDotsView()
                            
                            Text(loadingStages[loadingStage])
                                .font(.system(size: 14, weight: .medium, design: .rounded))
                                .foregroundColor(HeadspaceColors.mediumGray)
                                .animation(.easeInOut, value: loadingStage)
                        }
                    }
                }
                .opacity(textOpacity)
                
                Spacer()
                    .frame(height: 100)
            }
        }
        .onAppear {
            startLoadingAnimation()
        }
    }
    
    private func startLoadingAnimation() {
        // Logo entrance
        withAnimation(.spring(response: 0.8, dampingFraction: 0.7)) {
            logoScale = 1.0
            logoOpacity = 1.0
        }
        
        withAnimation(.easeOut(duration: 0.8).delay(0.3)) {
            textOpacity = 1.0
        }
        
        withAnimation(.linear(duration: 2).repeatForever(autoreverses: false)) {
            logoRotation = 360
        }
        
        // Start pulsing
        pulseAnimation = true
        
        // Show particles after delay
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            withAnimation(.easeIn(duration: 0.5)) {
                particlesVisible = true
            }
        }
        
        // Simulate loading stages
        Timer.scheduledTimer(withTimeInterval: 0.8, repeats: true) { timer in
            withAnimation(.easeInOut(duration: 0.3)) {
                progressValue = min(progressValue + 0.25, 1.0)
                
                if progressValue >= 0.25 && loadingStage == 0 {
                    loadingStage = 1
                } else if progressValue >= 0.5 && loadingStage == 1 {
                    loadingStage = 2
                } else if progressValue >= 0.75 && loadingStage == 2 {
                    loadingStage = 3
                } else if progressValue >= 1.0 {
                    timer.invalidate()
                    
                    // Complete loading
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        withAnimation(.easeInOut(duration: 0.5)) {
                            onLoadingComplete()
                        }
                    }
                }
            }
        }
    }
}

// MARK: - Animated Gradient Background
struct AnimatedGradientBackground: View {
    @State private var animateGradient = false
    
    var body: some View {
        LinearGradient(
            colors: [
                HeadspaceColors.lavender.opacity(0.15),
                HeadspaceColors.mint.opacity(0.1),
                HeadspaceColors.sky.opacity(0.15),
                Color.white
            ],
            startPoint: animateGradient ? .topLeading : .bottomLeading,
            endPoint: animateGradient ? .bottomTrailing : .topTrailing
        )
        .ignoresSafeArea()
        .onAppear {
            withAnimation(
                .easeInOut(duration: 8)
                .repeatForever(autoreverses: true)
            ) {
                animateGradient.toggle()
            }
        }
    }
}

// MARK: - Loading Dots Animation
struct LoadingDotsView: View {
    @State private var dotScale: [CGFloat] = [1, 1, 1]
    
    var body: some View {
        HStack(spacing: 4) {
            ForEach(0..<3) { index in
                Circle()
                    .fill(HeadspaceColors.purple)
                    .frame(width: 6, height: 6)
                    .scaleEffect(dotScale[index])
                    .animation(
                        .easeInOut(duration: 0.6)
                        .repeatForever()
                        .delay(Double(index) * 0.2),
                        value: dotScale[index]
                    )
            }
        }
        .onAppear {
            for index in 0..<3 {
                withAnimation {
                    dotScale[index] = 1.3
                }
            }
        }
    }
}

// MARK: - Particle Emitter
struct ParticleEmitterView: View {
    @State private var particles: [Particle] = []
    
    var body: some View {
        GeometryReader { geometry in
            ForEach(particles) { particle in
                ParticleView(particle: particle)
            }
        }
        .onAppear {
            createParticles()
        }
    }
    
    private func createParticles() {
        for _ in 0..<20 {
            let particle = Particle(
                x: CGFloat.random(in: 0...UIScreen.main.bounds.width),
                y: UIScreen.main.bounds.height + 50,
                size: CGFloat.random(in: 4...8),
                duration: Double.random(in: 8...15),
                delay: Double.random(in: 0...3),
                opacity: Double.random(in: 0.3...0.7)
            )
            particles.append(particle)
        }
    }
}

// MARK: - Particle Model
struct Particle: Identifiable {
    let id = UUID()
    let x: CGFloat
    let y: CGFloat
    let size: CGFloat
    let duration: Double
    let delay: Double
    let opacity: Double
}

// MARK: - Particle View
struct ParticleView: View {
    let particle: Particle
    @State private var offset: CGFloat = 0
    @State private var opacity: Double = 0
    
    var body: some View {
        Circle()
            .fill(
                RadialGradient(
                    colors: [
                        HeadspaceColors.purple.opacity(particle.opacity),
                        HeadspaceColors.purple.opacity(0)
                    ],
                    center: .center,
                    startRadius: 0,
                    endRadius: particle.size / 2
                )
            )
            .frame(width: particle.size, height: particle.size)
            .position(x: particle.x, y: particle.y + offset)
            .opacity(opacity)
            .onAppear {
                withAnimation(
                    .easeOut(duration: particle.duration)
                    .delay(particle.delay)
                ) {
                    offset = -UIScreen.main.bounds.height - 100
                    opacity = particle.opacity
                }
                
                withAnimation(
                    .easeIn(duration: 1)
                    .delay(particle.delay + particle.duration - 1)
                ) {
                    opacity = 0
                }
            }
    }
}

// MARK: - Loading Completion Transition
struct LoadingTransition: ViewModifier {
    let isLoading: Bool
    
    func body(content: Content) -> some View {
        ZStack {
            if isLoading {
                LoadingView {
                    // This will be called when loading completes
                }
                .transition(.asymmetric(
                    insertion: .opacity,
                    removal: .move(edge: .leading).combined(with: .opacity)
                ))
            } else {
                content
                    .transition(.asymmetric(
                        insertion: .move(edge: .trailing).combined(with: .opacity),
                        removal: .opacity
                    ))
            }
        }
        .animation(.easeInOut(duration: 0.8), value: isLoading)
    }
}

// MARK: - Preview
#Preview {
    LoadingView {
        print("Loading complete!")
    }
}